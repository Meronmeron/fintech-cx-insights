-- ============================================================================
-- TASK 3: ETHIOPIAN BANKING APPS ANALYSIS - ORACLE DATABASE DUMP
-- ============================================================================
-- Generated: 2025-06-04
-- Database: Oracle XE 21c
-- Schema: bank_reviews (SYSTEM user)
-- Tables: banks, reviews
-- Purpose: Persistent storage for Ethiopian banking app sentiment analysis
-- ============================================================================

-- ============================================================================
-- SCHEMA CREATION
-- ============================================================================

-- Drop existing tables if they exist (for clean import)
DROP TABLE reviews CASCADE CONSTRAINTS;
DROP TABLE banks CASCADE CONSTRAINTS;

-- Drop sequences if they exist
DROP SEQUENCE banks_seq;
DROP SEQUENCE reviews_seq;

-- ============================================================================
-- BANKS TABLE
-- ============================================================================

CREATE TABLE banks (
    bank_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    bank_name       VARCHAR2(100) NOT NULL UNIQUE,
    bank_code       VARCHAR2(10) NOT NULL UNIQUE,
    app_package     VARCHAR2(100),
    established_date DATE,
    headquarters    VARCHAR2(100),
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- REVIEWS TABLE
-- ============================================================================

CREATE TABLE reviews (
    review_id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    bank_id             NUMBER NOT NULL,
    review_text         CLOB NOT NULL,
    rating              NUMBER(2,1) CHECK (rating BETWEEN 1.0 AND 5.0),
    review_date         DATE,
    reviewer_name       VARCHAR2(100),
    app_version         VARCHAR2(20),
    helpful_count       NUMBER DEFAULT 0,
    review_length       NUMBER,
    
    -- Sentiment Analysis Results (VADER)
    vader_compound      NUMBER(4,3),
    vader_positive      NUMBER(4,3),
    vader_neutral       NUMBER(4,3),
    vader_negative      NUMBER(4,3),
    vader_label         VARCHAR2(10),
    
    -- Sentiment Analysis Results (TextBlob)
    textblob_polarity   NUMBER(4,3),
    textblob_subjectivity NUMBER(4,3),
    textblob_label      VARCHAR2(10),
    
    -- Sentiment Analysis Results (DistilBERT)
    distilbert_positive NUMBER(4,3),
    distilbert_negative NUMBER(4,3),
    distilbert_label    VARCHAR2(10),
    distilbert_confidence NUMBER(4,3),
    
    -- Ensemble Sentiment Results
    ensemble_label      VARCHAR2(10),
    ensemble_confidence NUMBER(4,3),
    
    -- Metadata
    scraped_date        TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed_date      TIMESTAMP,
    data_source         VARCHAR2(50) DEFAULT 'Google Play Store',
    
    -- Constraints
    CONSTRAINT chk_sentiment_labels CHECK (
        (vader_label IS NULL OR vader_label IN ('Positive', 'Negative', 'Neutral')) AND
        (textblob_label IS NULL OR textblob_label IN ('Positive', 'Negative', 'Neutral')) AND
        (distilbert_label IS NULL OR distilbert_label IN ('Positive', 'Negative', 'Neutral')) AND
        (ensemble_label IS NULL OR ensemble_label IN ('Positive', 'Negative', 'Neutral'))
    )
);

-- ============================================================================
-- FOREIGN KEY CONSTRAINTS
-- ============================================================================

ALTER TABLE reviews 
ADD CONSTRAINT fk_reviews_bank 
FOREIGN KEY (bank_id) REFERENCES banks(bank_id);

-- ============================================================================
-- INDEXES FOR PERFORMANCE
-- ============================================================================

CREATE INDEX idx_reviews_bank_id ON reviews(bank_id);
CREATE INDEX idx_reviews_rating ON reviews(rating);
CREATE INDEX idx_reviews_date ON reviews(review_date);
CREATE INDEX idx_reviews_sentiment ON reviews(ensemble_label);
CREATE INDEX idx_reviews_bank_rating ON reviews(bank_id, rating);
CREATE INDEX idx_reviews_sentiment_compound ON reviews(vader_compound);

-- ============================================================================
-- BANKS DATA INSERT
-- ============================================================================

-- Insert Ethiopian Banks
INSERT INTO banks (bank_name, bank_code, app_package, established_date, headquarters) VALUES
('Commercial Bank of Ethiopia', 'CBE', 'com.cbe.mobile', DATE '1963-01-01', 'Addis Ababa');

INSERT INTO banks (bank_name, bank_code, app_package, established_date, headquarters) VALUES
('Dashen Bank', 'DASH', 'com.dashen.mobile', DATE '1995-09-20', 'Addis Ababa');

INSERT INTO banks (bank_name, bank_code, app_package, established_date, headquarters) VALUES
('Bank of Abyssinia', 'BOA', 'com.boa.mobile', DATE '1996-02-15', 'Addis Ababa');

-- ============================================================================
-- SAMPLE REVIEWS DATA INSERT
-- ============================================================================

-- Sample positive review for Commercial Bank of Ethiopia
INSERT INTO reviews (
    bank_id, review_text, rating, review_date, review_length,
    vader_compound, vader_positive, vader_neutral, vader_negative, vader_label,
    textblob_polarity, textblob_subjectivity, textblob_label,
    distilbert_positive, distilbert_negative, distilbert_label, distilbert_confidence,
    ensemble_label, ensemble_confidence, processed_date
) VALUES (
    1, 'Great user experience! The design is modern and intuitive.', 4, DATE '2024-07-25', 58,
    0.659, 0.354, 0.646, 0.0, 'Positive',
    0.6, 0.525, 'Positive',
    0.0, 0.0, 'Neutral', 0.0,
    'Positive', 0.667, CURRENT_TIMESTAMP
);

-- Sample negative review for Commercial Bank of Ethiopia
INSERT INTO reviews (
    bank_id, review_text, rating, review_date, review_length,
    vader_compound, vader_positive, vader_neutral, vader_negative, vader_label,
    textblob_polarity, textblob_subjectivity, textblob_label,
    distilbert_positive, distilbert_negative, distilbert_label, distilbert_confidence,
    ensemble_label, ensemble_confidence, processed_date
) VALUES (
    1, 'App keeps crashing when I try to make payments. Very frustrating!', 2, DATE '2024-08-07', 65,
    -0.54, 0.0, 0.742, 0.258, 'Negative',
    -0.65, 1.0, 'Negative',
    0.0, 0.0, 'Neutral', 0.0,
    'Negative', 0.667, CURRENT_TIMESTAMP
);

-- Sample neutral review for Dashen Bank
INSERT INTO reviews (
    bank_id, review_text, rating, review_date, review_length,
    vader_compound, vader_positive, vader_neutral, vader_negative, vader_label,
    textblob_polarity, textblob_subjectivity, textblob_label,
    distilbert_positive, distilbert_negative, distilbert_label, distilbert_confidence,
    ensemble_label, ensemble_confidence, processed_date
) VALUES (
    2, 'Standard banking app with room for improvement in user experience.', 3, DATE '2024-03-23', 66,
    0.459, 0.25, 0.75, 0.0, 'Positive',
    0.0, 0.0, 'Neutral',
    0.0, 0.0, 'Neutral', 0.0,
    'Neutral', 0.667, CURRENT_TIMESTAMP
);

-- Sample positive review for Bank of Abyssinia
INSERT INTO reviews (
    bank_id, review_text, rating, review_date, review_length,
    vader_compound, vader_positive, vader_neutral, vader_negative, vader_label,
    textblob_polarity, textblob_subjectivity, textblob_label,
    distilbert_positive, distilbert_negative, distilbert_label, distilbert_confidence,
    ensemble_label, ensemble_confidence, processed_date
) VALUES (
    3, 'Amazing app! Makes mobile banking incredibly easy and secure.', 4, DATE '2024-11-07', 61,
    0.874, 0.624, 0.376, 0.0, 'Positive',
    0.528, 0.778, 'Positive',
    0.0, 0.0, 'Neutral', 0.0,
    'Positive', 0.667, CURRENT_TIMESTAMP
);

-- ============================================================================
-- COMMIT TRANSACTION
-- ============================================================================

COMMIT;

-- ============================================================================
-- DATA VERIFICATION QUERIES
-- ============================================================================

-- Verify banks data
SELECT 'BANKS DATA VERIFICATION' AS query_type;
SELECT bank_id, bank_name, bank_code, established_date, headquarters FROM banks ORDER BY bank_id;

-- Verify reviews data
SELECT 'REVIEWS DATA VERIFICATION' AS query_type;
SELECT COUNT(*) as total_reviews FROM reviews;

-- Bank-wise review count
SELECT 'REVIEW COUNT BY BANK' AS query_type;
SELECT 
    b.bank_name,
    COUNT(r.review_id) as review_count,
    ROUND(AVG(r.rating), 2) as avg_rating
FROM banks b
LEFT JOIN reviews r ON b.bank_id = r.bank_id
GROUP BY b.bank_name
ORDER BY review_count DESC;

-- Sentiment distribution
SELECT 'SENTIMENT DISTRIBUTION' AS query_type;
SELECT 
    ensemble_label,
    COUNT(*) as count,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM reviews), 1) as percentage
FROM reviews
WHERE ensemble_label IS NOT NULL
GROUP BY ensemble_label
ORDER BY count DESC;

-- ============================================================================
-- USEFUL ANALYTICAL QUERIES
-- ============================================================================

-- Top 5 most positive reviews
SELECT 'TOP POSITIVE REVIEWS' AS query_type;
SELECT 
    b.bank_name,
    r.rating,
    r.vader_compound,
    SUBSTR(r.review_text, 1, 100) as review_snippet
FROM banks b
JOIN reviews r ON b.bank_id = r.bank_id
WHERE r.ensemble_label = 'Positive'
ORDER BY r.vader_compound DESC
FETCH FIRST 5 ROWS ONLY;

-- Average sentiment scores by bank
SELECT 'AVERAGE SENTIMENT BY BANK' AS query_type;
SELECT 
    b.bank_name,
    ROUND(AVG(r.vader_compound), 3) as avg_vader_compound,
    ROUND(AVG(r.textblob_polarity), 3) as avg_textblob_polarity,
    ROUND(AVG(r.rating), 2) as avg_rating,
    COUNT(r.review_id) as review_count
FROM banks b
JOIN reviews r ON b.bank_id = r.bank_id
GROUP BY b.bank_name
ORDER BY avg_vader_compound DESC;

-- Monthly review trends (if you have enough data)
SELECT 'MONTHLY REVIEW TRENDS' AS query_type;
SELECT 
    TO_CHAR(review_date, 'YYYY-MM') as review_month,
    COUNT(*) as review_count,
    ROUND(AVG(rating), 2) as avg_rating,
    ROUND(AVG(vader_compound), 3) as avg_sentiment
FROM reviews
WHERE review_date IS NOT NULL
GROUP BY TO_CHAR(review_date, 'YYYY-MM')
ORDER BY review_month;

-- ============================================================================
-- EXPORT INSTRUCTIONS
-- ============================================================================

/*
TO EXPORT THIS DATABASE FROM ORACLE XE:

1. Using SQL*Plus or Oracle SQL Developer:
   
   -- Export Schema Structure Only:
   exp system/password@XE file=bank_reviews_schema.dmp tables=banks,reviews rows=n
   
   -- Export Schema with Data:
   exp system/password@XE file=bank_reviews_full.dmp tables=banks,reviews
   
   -- Export using Data Pump (recommended):
   expdp system/password@XE directory=DATA_PUMP_DIR dumpfile=bank_reviews.dmp tables=banks,reviews

2. Using Oracle SQL Developer:
   - Right-click on tables
   - Export -> DDL (for structure)
   - Export -> Data (for data)

3. Generate Insert Statements:
   SELECT 'INSERT INTO banks VALUES (' || bank_id || ',''' || bank_name || ''',''' || 
          bank_code || ''',''' || app_package || ''',DATE ''' || 
          TO_CHAR(established_date, 'YYYY-MM-DD') || ''',''' || headquarters || ''');'
   FROM banks;

TO IMPORT THIS DATABASE:

1. Create user and grants (if needed):
   CREATE USER bank_admin IDENTIFIED BY "BankReviews2024!";
   GRANT CONNECT, RESOURCE, DBA TO bank_admin;
   
2. Run this SQL script:
   @bank_reviews_dump.sql
   
3. Or use Data Pump:
   impdp system/password@XE directory=DATA_PUMP_DIR dumpfile=bank_reviews.dmp
*/

-- ============================================================================
-- DATABASE STATISTICS
-- ============================================================================

-- Table sizes
SELECT 'DATABASE STATISTICS' AS query_type;
SELECT 
    table_name,
    num_rows,
    blocks,
    avg_row_len
FROM user_tables
WHERE table_name IN ('BANKS', 'REVIEWS');

-- Index information
SELECT 'INDEX INFORMATION' AS query_type;
SELECT 
    index_name,
    table_name,
    column_name,
    column_position
FROM user_ind_columns
WHERE table_name IN ('BANKS', 'REVIEWS')
ORDER BY table_name, index_name, column_position;

-- ============================================================================
-- PERFORMANCE OPTIMIZATION HINTS
-- ============================================================================

/*
PERFORMANCE OPTIMIZATION RECOMMENDATIONS:

1. Analyze Tables (run after bulk data load):
   ANALYZE TABLE banks COMPUTE STATISTICS;
   ANALYZE TABLE reviews COMPUTE STATISTICS;

2. Additional Indexes (if needed for large datasets):
   CREATE INDEX idx_reviews_text_search ON reviews(UPPER(SUBSTR(review_text, 1, 100)));
   CREATE INDEX idx_reviews_date_range ON reviews(review_date, rating);

3. Partitioning (for very large datasets):
   -- Partition reviews by date range
   ALTER TABLE reviews MODIFY PARTITION BY RANGE (review_date) (
       PARTITION p_2023 VALUES LESS THAN (DATE '2024-01-01'),
       PARTITION p_2024 VALUES LESS THAN (DATE '2025-01-01'),
       PARTITION p_2025 VALUES LESS THAN (DATE '2026-01-01')
   );

4. Database Maintenance:
   -- Update statistics regularly
   EXEC DBMS_STATS.GATHER_SCHEMA_STATS('SYSTEM');
   
   -- Monitor index usage
   SELECT * FROM V$OBJECT_USAGE WHERE TABLE_NAME IN ('BANKS', 'REVIEWS');
*/

-- ============================================================================
-- END OF DUMP
-- ============================================================================

SPOOL OFF; 